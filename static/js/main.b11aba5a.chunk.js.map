{"version":3,"sources":["Apps/kasmetche/Wrapper.js","Apps/kasmetche/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","app","props","title","children","useImmer","name","loading","resultId","resultImg","state","setState","handleResponse","data","a","draft","axios","profile","id","response","first_name","_id","match","property","content","params","id2","className","style","width","height","display","alignItems","justifyContent","appId","src","alt","maxWidth","textAlign","href","fontWeight","onCompleted","Applist","slug","map","item","key","Main","start_key","position","left","top","Math","floor","random","marginTop","zIndex","borderRadius","Boolean","window","location","hostname","ReactDOM","render","path","exact","component","isIndex","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b11aba5a.chunk.js","sourcesContent":["/* eslint-disable no-param-reassign */\nimport React from 'react';\nimport { useImmer } from 'use-immer';\n\nimport { FacebookProvider, LoginButton, ShareButton } from 'react-facebook';\n\nimport axios from 'axios';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\n\n\nconst Wrapper = ({\n  app, props, title, children,\n}) => {\n  const [state, setState] = useImmer({\n    name: null,\n    loading: false,\n    resultId: null,\n    resultImg: null,\n  });\n\n  const handleResponse = async (data) => {\n    setState((draft) => {\n      draft.loading = true;\n    });\n    const response = await axios(`https://grafix.herokuapp.com/?url=http://kasmetche.netlify.com/${app}/shot/${data.profile.id}`);\n\n    setState((draft) => {\n      draft.name = data.profile.first_name;\n      draft.id = data.profile.id;\n      draft.resultImg = response.data.id;\n      draft.resultId = response.data._id;\n      draft.loading = false;\n    });\n  };\n  const { match } = props;\n  return (\n    <>\n      {match ? (\n        <HelmetProvider>\n          <Helmet>\n            <meta property=\"og:url\" content={`https://kasmetche.netlify.com/${match.params.id}/${match.params.id2}`} />\n            <meta property=\"og:type\" content=\"article\" />\n            <meta property=\"og:title\" content={title} />\n            <meta property=\"og:image\" content={`https://grafix.herokuapp.com/${match.params.id2}.jpg`} />\n            <meta property=\"og:image:width\" content=\"632\" />\n            <meta property=\"og:image:height\" content=\"387\" />\n          </Helmet>\n        </HelmetProvider>\n      ) : null}\n      {match && match.params.id2 === 'shot'\n        ? children\n        : (<span />)}\n      <div\n        className=\"App\"\n        style={{\n          width: '100%',\n          height: '100vh',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        <div style={{ display: 'inline-block' }}>\n          <FacebookProvider appId=\"2839078742783517\">\n            {state.loading ? (<div>Loading</div>) : null}\n            {state.name}\n            {!state.name ? (\n              <div style={{ textAlign: 'center' }}>\n                <h1 style={{ fontWeight: 'lighter' }}>\n                  {`${title}`}\n                </h1>\n                <LoginButton\n                  className=\"ant-btn ant-btn-primary ant-btn-round ant-btn-lg\"\n                  onCompleted={handleResponse}\n                >\n                  <span>–ò–∑—Ç–µ–≥–ª–∏ —Å–∏</span>\n                </LoginButton>\n              </div>\n            ) : (\n              <div>\n                <img src={state.resultImg} alt=\"\" style={{ maxWidth: '100%' }} />\n                <div style={{ textAlign: 'center' }}>\n                  <ShareButton href={`https://kasmetche.netlify.com/${app}/${state.resultId}`} className=\"ant-btn ant-btn-primary ant-btn-round ant-btn-lg\">\n                          –°–ø–æ–¥–µ–ª–∏\n                  </ShareButton>\n                </div>\n                <div id=\"SC_TBlock_706275\" className=\"SC_TBlock\" />\n              </div>\n            )}\n          </FacebookProvider>\n        </div>\n      </div>\n    </>\n  );\n};\nexport default Wrapper;\n","import React from 'react';\n\nimport 'antd/dist/antd.css';\n\nimport Wrapper from './Wrapper';\n\nconst Applist = () => {\n  const apps = [{\n    title: 'üéÑ –ö–æ–ª–µ–¥–Ω–∞ –±–∞–Ω–∏—Ü–∞ —Å –∫—ä—Å–º–µ—Ç–∏ üéÑ',\n    slug: 'banica',\n  }, {\n    title: 'üéÑ –ò–∑—Ç–µ–≥–ª–∏ —Å–∏ —Ü–∏—Ç–∞—Ç-–∫—ä—Å–º–µ—Ç—á–µ üéÑ',\n    slug: 'quote',\n  }];\n\n  return apps.map((item) => (<h2 key={item.slug}><a href={item.slug}>{item.title}</a></h2>));\n};\n\nconst App = (props) => {\n  const { match } = props;\n\n  return ((() => {\n    if (match && match.params.id === 'banica') {\n      return (\n        <Wrapper props={props} title=\"üéÑ –ö–æ–ª–µ–¥–Ω–∞ –±–∞–Ω–∏—Ü–∞ —Å –∫—ä—Å–º–µ—Ç–∏ üéÑ\" app=\"banica\">\n          <div style={{ height: 599 }}>\n            <img\n              src={`https://graph.facebook.com/${match ? match.params.start_key : null}/picture?type=large`}\n              style={{\n                position: 'fixed', maxWidth: 110, left: 262, top: 45,\n              }}\n              alt=\"\"\n            />\n            <img src=\"/banica/bg.png\" style={{ position: 'fixed' }} alt=\"\" />\n            <img src={`/banica/${Math.floor((Math.random() * 30) + 0)}.png`} style={{ position: 'fixed', top: 190, left: 205 }} alt=\"\" />\n          </div>\n        </Wrapper>\n      );\n    } if (match && match.params.id === 'quote') {\n      return (\n        <Wrapper props={props} title=\"üéÑ –ò–∑—Ç–µ–≥–ª–∏ —Å–∏ —Ü–∏—Ç–∞—Ç-–∫—ä—Å–º–µ—Ç—á–µ üéÑ\" app=\"quote\">\n          <div style={{ height: 599, width: 633, textAlign: 'center' }}>\n            <img src={`/quotes/${Math.floor((Math.random() * 255) + 0)}.png`} style={{ marginTop: 90, zIndex: 100 }} alt=\"\" />\n            <img\n              src={`https://graph.facebook.com/${match ? match.params.start_key : null}/picture?type=large`}\n              style={{\n                position: 'fixed',\n                maxWidth: 110,\n                left: 262,\n                top: 25,\n                borderRadius: '50%',\n              }}\n              alt=\"\"\n            />\n          </div>\n        </Wrapper>\n      );\n    }\n\n    return <Applist />;\n  })());\n};\nexport default App;\n","// izteglisi//\nimport Main from './Apps/kasmetche/index';\n\nexport default Main;\n// test\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Main from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst App = () => (\n  <Router>\n    <div>\n      <Route path=\"/\" exact component={() => <Main isIndex />} />\n      <Route path=\"/:id/\" exact render={(props) => <Main match={props.match} isIndex={false} />} />\n      <Route path=\"/:id/:id2\" exact render={(props) => <Main match={props.match} isIndex={false} />} />\n      <Route path=\"/:id/:id2/:start_key\" exact render={(props) => <Main match={props.match} isIndex={false} />} />\n    </div>\n  </Router>\n);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}